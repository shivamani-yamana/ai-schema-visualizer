import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { generateObject } from "ai";
import { NextResponse } from "next/server";
import { z } from "zod";

const google = createGoogleGenerativeAI();

const universalSchema = z.discriminatedUnion("intent", [
  z.object({
    intent: z.literal("schema_visualization"),
    data: z.object({
      tables: z.array(
        z.object({
          name: z.string().describe("Table name"),
          sql: z.string().describe("Complete CREATE TABLE statement"),
          columns: z.array(
            z.object({
              name: z.string().describe("Column name"),
              dataType: z.string().describe("SQL data type"),
              isPrimaryKey: z.boolean(),
              isForeignKey: z.boolean(),
            })
          ),
        })
      ),
      relationships: z.array(
        z.object({
          from: z.string().describe("Table with foreign key"),
          to: z.string().describe("Table being referenced"),
        })
      ),
    }),
  }),

  z.object({
    intent: z.literal("sql_query"),
    data: z.object({
      query: z.string().describe("The generated SQL query."),
    }),
  }),

  z.object({
    intent: z.literal("conversational"),
    data: z.object({
      response: z.string().describe("A friendly, conversational response."),
    }),
  }),
]);

const MASTER_PROMPT_URL = process.env.MASTER_PROMPT_URL || "";
if (!MASTER_PROMPT_URL) {
  throw new Error("MASTER_PROMPT_URL is required");
}
async function getPrompt() {
  const response = await fetch(MASTER_PROMPT_URL);
  return await response.text();
}
export async function POST(req: Request) {
  try {
    const { userInput } = await req.json();

    if (!userInput) {
      return NextResponse.json(
        { error: "User input is required." },
        { status: 400 }
      );
    }

    let masterPrompt = await getPrompt();
    masterPrompt = masterPrompt.replace("{{userInput}}", userInput);

    const { object: aiResponse } = await generateObject({
      model: google("gemini-2.5-flash"),
      schema: universalSchema,
      prompt: masterPrompt,
    });

    switch (aiResponse.intent) {
      case "schema_visualization":
      case "sql_query":
      case "conversational":
        return NextResponse.json(aiResponse);

      default:
        return NextResponse.json(
          {
            error: "Invalid intent generated by the model.",
          },
          { status: 500 }
        );
    }
  } catch (error) {
    console.error("Error in API route:", error);
    return NextResponse.json(
      { error: "An internal error occurred" },
      { status: 500 }
    );
  }
}
